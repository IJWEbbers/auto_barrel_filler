
auto_barrel_filler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000013e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e3  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000062e  00000000  00000000  000008c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000225  00000000  00000000  00000ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000376  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <floatSwitchInit>:
uint8_t bottom_switch_state;

void floatSwitchInit(void)
{
	/* top sensor */
	DDRD &= ~(1<<0);	//set pinD0 as input
  90:	50 98       	cbi	0x0a, 0	; 10
	PORTD |= (1<<0); //use pull-up resistor on pinD0
  92:	58 9a       	sbi	0x0b, 0	; 11
	
	/* bottom sensor */
	DDRD &= ~(1<<1);	//set pinD1 as input
  94:	51 98       	cbi	0x0a, 1	; 10
	PORTD |= (1<<1); //use pull-up resistor on pinD1
  96:	59 9a       	sbi	0x0b, 1	; 11
  98:	08 95       	ret

0000009a <relayInit>:
}

void relayInit(void)
{
	DDRB |= (1<<1); //set pinB1 as output
  9a:	21 9a       	sbi	0x04, 1	; 4
	PORTB &= ~(1<<1); //set portB1 low
  9c:	29 98       	cbi	0x05, 1	; 5
  9e:	08 95       	ret

000000a0 <main>:
}

int main(void)
{
	//Initialize the components
    floatSwitchInit();
  a0:	0e 94 48 00 	call	0x90	; 0x90 <floatSwitchInit>
    relayInit();
  a4:	0e 94 4d 00 	call	0x9a	; 0x9a <relayInit>
	
    	while (1)
	{			
		//if water is above top level, turn off pump
		top_switch_state = PIND & (1<<0);
  a8:	89 b1       	in	r24, 0x09	; 9
  aa:	81 70       	andi	r24, 0x01	; 1
  ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <top_switch_state>
		if (top_switch_state == 0)
  b0:	81 11       	cpse	r24, r1
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <main+0x16>
		{
			PORTB &= ~(1<<PORTB1);	
  b4:	29 98       	cbi	0x05, 1	; 5
		}
		//if water is below bottom level, turn on pump
		bottom_switch_state = PIND & (1<<1);
  b6:	89 b1       	in	r24, 0x09	; 9
  b8:	82 70       	andi	r24, 0x02	; 2
  ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if (bottom_switch_state == (1<<1))
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	99 f7       	brne	.-26     	; 0xa8 <main+0x8>
		{
			PORTB |= (1<<PORTB1);
  c2:	29 9a       	sbi	0x05, 1	; 5
  c4:	f1 cf       	rjmp	.-30     	; 0xa8 <main+0x8>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
